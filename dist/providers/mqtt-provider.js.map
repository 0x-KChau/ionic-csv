{"version":3,"file":"mqtt-provider.js","sourceRoot":"","sources":["../../src/providers/mqtt-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\n\n// mqtt\ndeclare const Paho: any;\ndeclare const document: any;\n\n@Injectable()\n\nexport class MQTTService {\n\n  public client: any;\n  private scripts: any = {};\n  private ScriptStore: Scripts[] = [\n    {\n      name: 'paho_mqtt', src: 'https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.1.0/paho-mqtt.min.js'\n    }\n  ];\n\n  constructor() {\n    this.ScriptStore.forEach((script: any) => {\n        this.scripts[script.name] = {\n            loaded: false,\n            src: script.src\n        };\n    });\n  }\n\n  // load script\n  private _load(...scripts: string[]) {\n      var promises: any[] = [];\n      scripts.forEach((script) => promises.push(this._loadScript(script)));\n      return Promise.all(promises);\n  }\n\n  private _loadScript(name: string) {\n      return new Promise((resolve, reject) => {\n          //resolve if already loaded\n          if (this.scripts[name].loaded) {\n              resolve({name, loaded: true, status: 'Already Loaded'});\n          }\n          else {\n              //load script\n              let script = document.createElement('script');\n              script.type = 'text/javascript';\n              script.src = this.scripts[name].src;\n              if (script.readyState) {  //IE\n                  script.onreadystatechange = () => {\n                      if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n                          script.onreadystatechange = null;\n                          this.scripts[name].loaded = true;\n                          resolve({name, loaded: true, status: 'Loaded', script, src: script.src});\n                      }\n                  };\n              } else {  //Others\n                  script.onload = () => {\n                      this.scripts[name].loaded = true;\n                      resolve({name, loaded: true, status: 'Loaded', script, src: script.src});\n                  };\n              }\n              script.onerror = (error: any) => resolve({name, loaded: false, status: 'Loaded'});\n              document.getElementsByTagName('head')[0].appendChild(script);\n          }\n      });\n  }\n\n  // mqtt\n  // Load the paho-mqtt mqtt and create a client instance\n  public loadingMqtt(onConnectionLost, onMessageArrived, topic: string[], MQTT_CONFIG: {\n      domain: string,\n      port: number,\n      clientId: string,\n    }) {\n    return this._load('paho_mqtt').then(data => {\n      // set callback handlers\n      this.client = new Paho.Client(MQTT_CONFIG.domain, Number(MQTT_CONFIG.port), MQTT_CONFIG.clientId);\n      this.client.onConnectionLost = onConnectionLost.bind(this);\n      this.client.onMessageArrived = onMessageArrived.bind(this);\n      // client connect and subscribe\n      // console.log(this.client);\n      return this.client.connect({onSuccess: this._onConnect.bind(this, topic)});\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  // called when the client connects\n  private _onConnect(topic: string[]) {\n    // Once a connection has been made, make a subscription and send a message.\n    // console.log(\"onConnect\");\n    // subscribe the topic\n    topic.forEach((tp) => {\n      this.client.subscribe(tp);\n    });\n\n    return this.client;\n  }\n}\n\n\ninterface Scripts {\n   name: string;\n   src: string;\n}\n"]}